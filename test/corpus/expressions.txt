===================
conditional
===================

if (true) {
  a = 1;
}

---

(module
  (conditional_statement (keyword) (literal (bool))) 
  (block
    (identifier) (operator) (literal (integer))
  )
)

===================
parenthesis
===================

a = (1+1);

---

(module
  (identifier) 
  (operator)
  (literal (integer))
  (operator) 
  (literal (integer))
)

===================
subscript_expression
===================

a = b[1];

---

(module
  (identifier) 
  (operator)
  (subscript_expression
    (identifier)
    (literal (integer))
  )
)

===================
subscript_expression
===================

a = b[c + 1];

---

(module
  (identifier) 
  (operator)
  (subscript_expression
    (identifier)
    (identifier)
    (operator)
    (literal (integer))
  )
)


===================
unsafe cast
===================

cast x;

---

(module 
  (cast_expression
    (keyword) (identifier)
  )
)

===================
safe cast
===================

cast (x, Int);

---

(module 
  (cast_expression
    (keyword) 
    (identifier) 
    (type (identifier))
  )
)

===================
runtime type check
===================

(x : Type);

---

(module 
  (runtime_type_check_expression
    (identifier) (type (identifier))
  )
)

===================
preprocessor macro
===================

#if !condition
trace(x);
#elseif (condition > 2)
trace(y);
#else
trace(z);
#end

---

(module
  (preprocessor_statement (operator) (identifier))
  (call_expression (identifier) (identifier))
  (preprocessor_statement (identifier) (operator) (literal (integer)))
  (call_expression (identifier) (identifier))
  (preprocessor_statement)
  (call_expression (identifier) (identifier))
  (preprocessor_statement)
)
